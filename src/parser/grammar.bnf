// lexical grammer —————— tokenizor
%lex
%%

\s+                                                 /* 忽略空白字符 */

\"([^\"\\]*(\\.[^\"\\]*)*)\"                        return 'STRING' /* 匹配以双引号包围的字符串，允许内部的转义字符 */

\d+                                                 return 'NUMBER'  /* 数字串 */

[\w\-+*=<>/]+                                       return 'SYMBOL'  /* 符号，注意这里的符号集合可能需要根据你的具体需求调整 */

\{                                                   return 'LBRACE' 
\}                                                   return 'RBRACE'

/lex




// syntactic grammer —————— BNF
%%
Exp
  : Atom
  | List
  | Block
  ;

Atom
  : NUMBER { $$ = Number($1) }
  | STRING
  | SYMBOL
  ;

List
  : '(' ListEntries ')' { $$ = $2 }
  ;

ListEntries
  : ListEntries Exp { $1.push($2); $$ = $1 }
  | /* empty */ { $$ = [] }
  ;

Block
  : '{' BlockEntries '}' { $2.unshift("block"); $$ = $2 }
  ;

BlockEntries
  : BlockEntries Exp { $1.push($2); $$ = $1 }
  | /* empty */ { $$ = [] }
  ;